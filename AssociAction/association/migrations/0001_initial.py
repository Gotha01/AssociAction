# Generated by Django 4.2.2 on 2023-09-05 07:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion

def create_initial_sectors(apps, schema_editor):
    Sector = apps.get_model('association', 'Sector')
    sectors = [
        {"sectorname": "Culture (Arts)", "description": "Promotion des arts visuels, de la musique, de la danse, etc."},
        {"sectorname": "Sciences et technologie', 'description': 'Innovations, recherches scientifiques, etc."},
        {"sectorname": "Éducation', 'description': 'Éducation générale, éducation aux médias, etc."},
        {"sectorname": "Santé', 'description': 'Vaccinations, accès aux soins médicaux, santé publique, prévention des maladies"},
        {"sectorname": "Sports', 'description': 'Tennis, football, basket, handball, rugby, etc."},
        {"sectorname": "Environnement', 'description': 'Développement durable, protection de l'environnement, etc."},
        {"sectorname": "Vie sociale', 'description': 'Personnes âgées, jeunesse et loisirs, découverte sociale"},
        {"sectorname": "Aide Sociale', 'description': 'Habitat, Alimentation, Handicap, Humanitaire"},
        {"sectorname": "Patrimoine', 'description': 'Préservation du patrimoine culturel, historique et architectural."},
        {"sectorname": "Animaux', 'description': 'Protection et bien-être des animaux."},
        {"sectorname": "Relation internationale', 'description': 'Jumelage, diplomatie, coopération internationale"},
        {"sectorname": "Religions', 'description': 'Activités religieuses et interreligieuses"},
        {"sectorname": "Politique', 'description': 'Engagement civique, sensibilisation politique"},
        {"sectorname": "Économique', 'description': 'Activités économiques, développement économique"},
        {"sectorname": "Droit', 'description': 'Droits des consommateurs, protection de l'enfance, etc."},
        {"sectorname": "Énergie', 'description': 'Énergie renouvelable, gestion de l'énergie, etc."},
        {"sectorname": "Transport', 'description': 'Mobilité urbaine, transport public, etc."},
        {"sectorname": "Agriculture', 'description': 'Agriculture durable, coopératives, sécurité alimentaire, etc."},
        {"sectorname": "Tourisme', 'description': 'Promotion du tourisme local, tourisme durable, etc."},
        {"sectorname": "Média', 'description': 'Médias numériques, journalisme indépendant, etc."},
    ]
    for sector_data in sectors:
        Sector.objects.create(**sector_data)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('authentication', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Association',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('associationname', models.CharField(max_length=200, unique=True)),
                ('acronym', models.CharField(blank=True, max_length=10, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=10, null=True)),
                ('email', models.EmailField(max_length=100, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=150, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='')),
            ],
            options={
                'db_table': 'association',
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sectorname', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'sector',
            },
        ),
        migrations.CreateModel(
            name='UserRoleAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('association', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='association.association')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_role_association',
            },
        ),
        migrations.CreateModel(
            name='AssociationSector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('association', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='association.association')),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='association.sector')),
            ],
            options={
                'db_table': 'sector_association',
            },
        ),
        migrations.CreateModel(
            name='AssociationAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.address')),
                ('association', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='association.association')),
            ],
            options={
                'db_table': 'association_address',
            },
        ),
        migrations.RunPython(create_initial_sectors),
    ]
